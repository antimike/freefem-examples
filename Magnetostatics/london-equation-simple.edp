load "msh3"
load "tetgen"
load "medit"
load "iovtk"

// Macros
macro Curl(Ax, Ay, Az) [dy(Az)-dz(Ay), dz(Ax)-dx(Az), dx(Ay)-dy(Ax)] //
macro Div(Ax, Ay, Az) (dx(Ax) + dy(Ay) + dz(Az)) //
macro Grad(F) ([dx(F), dy(F), dz(F)]) //
macro dn(f) (N.x*dx(f) + N.y*dy(f) + N.z*dz(f)) //
macro SquareParameterization(a, b, c, d) [a + (b-a)*x, c + (d-c)*y] //

func r = sqrt(x^2 + y^2 + z^2);
func rho = sqrt(x^2 + y^2);
//func phiHat = [-y/rho, x/rho, 0];
real rho0 = 1e-3;
real rhoApprox = rho >= rho0 ? rho : rho0;
func phiHat = [-y/rhoApprox, x/rhoApprox, 0];

// Parameters
real Mu0 = 4.*pi*1.e-7;	// Vacuum magnetic permeability (SI)
real B0 = 100; // External field strength
real penetrationFraction = .1;
real fluxQuantum = 1.;

// Geometry

// BOUNDING BOX
int FRONT=1, RIGHT=2, BACK=3, LEFT=4, BOTTOM=5, TOP=6;
int EXTERNAL=100;
int INTERNAL=110;
real boxLength = 50;
int nx=25, ny=25, nz=25;

// Mesh-generation schematic:
// mesh (2D) --> buildLayers (extrude) --> buildBdMesh (boundary mesh) 
// --> mesh.Gamma (isolate boundaries and glue together, if necessary)
// tetg(mesh1.Gamma + mesh2.Gamma + ...) (fill shell assembled in previous step with tetragonal cells)

// Naming conventions: "T" --> "Triangulation," "v" --> "volume" (i.e., 3D), "s" --> "surface" (2D)
//mesh Ts02D = square(nx, ny, SquareParameterization(-boxLength/2., boxLength/2., -boxLength/2., boxLength/2.));
mesh Ts02D = square(nx, ny, 
	SquareParameterization(
		-boxLength/2, boxLength/2, 
		-boxLength/2, boxLength/2
	)
);
int[int] lup = [0, EXTERNAL], ldown = [0, EXTERNAL], 
	lside = [0, EXTERNAL, 0, EXTERNAL, 0, EXTERNAL, 0, EXTERNAL];
mesh3 Tv0 = buildlayers(Ts02D, nz, zbound=[-boxLength/2, boxLength/2], labelmid = lside, labelup = lup, labeldown = ldown);
Tv0 = buildBdMesh(Tv0);
meshS Ts0 = Tv0.Gamma;

//plot(Ts02D, wait=true);		// This is more annoying than helpful
//plot(Ts0, wait=true);		// Evidently not supported for 3D meshes...
medit("Bounding box", Ts0);

// SUPERCONDUCTING SLAB
real scaleFactor = 10;
real aspectRatio = 10;
mesh TsSC2D = square(5*nx/scaleFactor, 5*ny/scaleFactor,   	// The "magic number" 5 was chosen
	SquareParameterization(                                  	// to make the mesh relatively more dense on the
		-boxLength/(2*scaleFactor), boxLength/(2*scaleFactor), 	// SC boundary than on the spatial boundary
		-boxLength/(2*scaleFactor), boxLength/(2*scaleFactor)
	)
);
int[int] SCup = [0, INTERNAL], SCdown = [0, INTERNAL],
	SCside = [0, INTERNAL, 0, INTERNAL, 0, INTERNAL, 0, INTERNAL];
mesh3 TvSC = buildlayers(TsSC2D, 5*nz/(scaleFactor*aspectRatio), 
	zbound=[-boxLength/(2*scaleFactor*aspectRatio), boxLength/(2*scaleFactor*aspectRatio)],
	labelmid = SCside, labelup = SCup, labeldown = SCdown);
TvSC = buildBdMesh(TvSC);
meshS TsSC = TvSC.Gamma;

//plot(TvSC, wait=true);		// For some reason this isn't supported
medit("SC mesh (no hole)", TvSC);

// SLAB WITH HOLE
//int holeBorder = 201;
//real holeRatio = 0.5;
//real holeRadius = boxLength/(2*scaleFactor*holeRatio);
////TsSC2D = buildBdMesh(TsSC2D);
//meshS TsSC1D = TsSC2D.Gamma;		// Border of 2D mesh extruded to form slab without hole
//border hole(t = 0, 2*pi) {x = holeRadius*cos(t); y = holeRadius*sin(t); label = holeBorder;}
//mesh TsSChole2D = buildmesh(TsSC1D(5*2*(nx + ny)/scaleFactor) - hole(5*2*(nx + ny)/scaleFactor));
//mesh3 TvSChole = buildlayers(TsSChole2D, 5*nz/(scaleFactor*aspectRatio), 
	//zbound=[-boxLength/(2*scaleFactor*aspectRatio), boxLength/(2*scaleFactor*aspectRatio)],
	//labelmid = SCside, labelup = SCup, labeldown = SCdown);		// TODO: Figure out how to label hole boundary
//TvSChole = buildBdMesh(TvSChole);
//meshS TsSChole = TvSChole.Gamma;

//plot(TvSChole, wait=true);

// COMBINED MESH
meshS TsTotal = Ts0 + TsSC;
int space = 300;
int SC = 301;
real maxvolSpace = boxLength*boxLength*boxLength/(nx*ny*nz);
real maxvolSC = maxvolSpace/(scaleFactor*scaleFactor*scaleFactor*aspectRatio*5*5*5);
real[int] regions = [0, 0, boxLength*1.5/scaleFactor, space, maxvolSpace, 0, 0, 0, SC, maxvolSC];
mesh3 TvTotal = tetg(TsTotal, switch = "pqaAAYYQ", nbofregions = 2, regionlist = regions);

medit("Full triangulation", TvTotal);

// FE SPACES
fespace Sv0(TvTotal, P0);
fespace Sv1(TvTotal, P1);
fespace Vv2(TvTotal, [P2, P2, P2]);


// PROBLEM DEFINITION
real penaltyConstant = 1.;
real penetrationDepth = penetrationFraction*boxLength/scaleFactor;
real JsPrefactor = 1/(Mu0*penetrationDepth^2);
real AqPrefactor = fluxQuantum/(2*pi*rho);

Sv0 inSC = region == SC;
Sv1 Psi;		// Magnetic scalar potential
Vv2 [Ax, Ay, Az] = [0, 0, 0];               	// Vector potential
Vv2 [Wx, Wy, Wz];                           	// Vector basis functions
Sv1 v;		// Scalar basis functions for magnetic scalar potential
Sv1 u;		// Scalar basis functions for single-valued "phase"
Vv2 [Bx, By, Bz] = Curl(Ax, Ay, Az);        	// Magnetic field
Vv2 [Hxx, Hxy, Hxz] = [0, 0, 1];		// External (applied) magnetic field
Vv2 [Jx, Jy, Jz] = inSC * Curl(Bx, By, Bz); 	// Current density (only defined in SC)
//Vv2 [Jsx, Jsy, Jsz] = JsPrefactor*(fluxQuantum*phiHat/(2*pi*rho) - [Ax, Ay, Az]);
// While well-intentioned, the above doesn't work since it combines linear and bilinear terms
Vv2 [AQx, AQy, AQz] = AqPrefactor*phiHat;

                                                      	

varf vectorLaplacian([Ax, Ay, Az], [Wx, Wy, Wz]) = 
	int3d(TvTotal)(Curl(Ax, Ay, Az)'*Curl(Wx, Wy, Wz) - Div(Ax, Ay, Az)*Div(Wx, Wy, Wz));
// Not necessary
//varf continuityForm = 
	//int3d(Vv2)(JsPrefactor*inSC*Div(Wx, Wy, Wz)*[Ax, Ay, Az])		// Bilinear term (homogeneous)
	//- int3d(Vv2)(inSC*JsPrefactor*fluxQuantum/(2*pi*rho)*Div(Wx, Wy, Wz)*phiHat)		// Linear term (inhomogeneous)
	//- int2d(TsSC)(JsPrefactor*[Wx, Wy, Wz]'*[Ax, Ay, Az])		// Bilinear boundary term
	//+ int2d(TsSC)(JsPrefactor*fluxQuantum/(2*pi*rho)*[Wx, Wy, Wz]'*phiHat);		// Linear boundary term
// This doesn't work---varf needs at least two arguments
//varf rhsTerm([Wx, Wy, Wz]) = 
	//int3d(TvTotal)(Mu0*JsPrefactor*inSC*[AQx, AQy, AQz]'*[Wx, Wy, Wz]);
//varf currentBoundaryTerm([Ax, Ay, Az]) = 
	//on(INTERNAL, JsPrefactor*fluxQuantum/(2*pi*rho)*N'*phiHat - JsPrefactor*N'*[Ax, Ay, Az]);
//// TODO: Figure out how to implement a cross-product with surface normal
////varf spaceBoundaryTerm =
	////on(EXTERNAL, 
//varf spaceBoundaryTerm([Ax, Ay, Az]) = 
	//on(EXTERNAL, Curl(Ax, Ay, Az) - [Hxx, Hxy, Hxy]);

problem oneVortexNoHole([Ax, Ay, Az], [Wx, Wy, Wz]) = 
	int3d(TvTotal)(Curl(Ax, Ay, Az)'*Curl(Wx, Wy, Wz) - Div(Ax, Ay, Az)*Div(Wx, Wy, Wz))
	//+ on(INTERNAL, fluxQuantum/(2*pi*rhoApprox^2)*(-y*N.x + x*N.y) = Ax*N.x + Ay*N.y + Az*N.z)
	//+ on(INTERNAL, Ax=Ay)
	//+ on(EXTERNAL, Curl(Ax, Ay, Az) = [Hxx, Hxy, Hxy])
	//+ on(EXTERNAL, dy(Az) = Hxx + dz(Ay))
	- int3d(TvTotal)(Mu0*JsPrefactor*inSC*[AQx, AQy, AQz]'*[Wx, Wy, Wz]);

//oneVortexNoHole;


